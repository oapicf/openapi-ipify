/*
 * openapi-ipify
 *
 * OpenAPI client for ipify, a simple public IP address API
 *
 * The version of the OpenAPI document: 5.2.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Ip
    /// </summary>
    [DataContract(Name = "Ip")]
    public partial class Ip : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ip" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Ip() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Ip" /> class.
        /// </summary>
        /// <param name="varIp">varIp (required).</param>
        public Ip(string varIp = default(string))
        {
            // to ensure "varIp" is required (not null)
            if (varIp == null)
            {
                throw new ArgumentNullException("varIp is a required property for Ip and cannot be null");
            }
            this.VarIp = varIp;
        }

        /// <summary>
        /// Gets or Sets VarIp
        /// </summary>
        [DataMember(Name = "ip", IsRequired = true, EmitDefaultValue = true)]
        public string VarIp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Ip {\n");
            sb.Append("  VarIp: ").Append(VarIp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
